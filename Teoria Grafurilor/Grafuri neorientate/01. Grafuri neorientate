  Un GRAF NEORIENTAT este o pereche ordonata de multimi G = (V, E), unde V este o multime finita si nevida (multimea nodurilor/ varfurilor) si E este o multime de perechi neordonate de elemente ale multimii V (multimea muchiilor).
  
  Nodurile grafului se reprezinta prin cercuri, iar muchiile prin linii.
  Vom nota |V| = n (numarul de noduri) si |E| = m (numarul de muchii)
  
  x - u - y -> nodurile x si y sunt adiacente
            -> muchia u este incidenta cu nodul x si nodul y
            -> nodurile x si y sunt extremitatile muchiei u

  Fie G = (V, E) un graf neorientat. GRADUL unui nod x ∈ V se noteaza cu d(x) si este egal cu numarul muchiilor incidente cu nodul x (sau numarul nodurilor adiacente cu nodul x)
  1) Daca d(x) = 0 => x este NOD IZOLAT
  2) Daca d(x) = 1 => x este NOD TERMINAL
  3) Gradul MAXIM al unui nod poate fi n - 1.
  4) Gradul MINIM al unui nod poate fi 0.
  5) d(x1) + d(x2) + ... + d(xn) = 2 * m
  6) Intr-un graf neorientat, exista un NUMAR PAR de noduri cu GRAD IMPAR.
  
  Graful neorientat G = (V, E) este fraf complet, daca oricare 2 noduri ale sale sunt adiacente.
  TEOREMA: Un graf complet cu n noduri are n * (n - 1) / 2 muchii.
  
  Graful neorientat G = (V, E) este nul, daca are toate nodurile izolate.
  
  Fie G = (V, E) un graf neorientat. Un SUBGRAF al grafului G este graful neorientat G' = (V', E'), unde V' ⊆ V, E' ⊆ E, iar E' contine 
doar muchiile care au ambele extremitati in V' (este graful insusi sau graful obtinut prin eliminarea unuia sau a mai multor noduri si a
muchiilor incidente cu acestea).
  Pentru graful neorientat G = (V, E), se pot construi 2 ^ n - 1 subgrafuri distincte (2 grafuri sunt distincte daca difera prin cel putin o muchie).

  Fie G = (V, E) un graf neorientat. Un GRAF PARTIAL al lui G este graful G' = (V, E'), unde E' ⊆ E (este graful insusi sau graful obtinut prin eliminarea uneia sau a mai multor muchii).
  Pentru un graf neorientat G = (V, E), se pot construi 2 ^ m grafuri partiale distincte.
  
  Reprezentarea in memorie a grafurilor neorientate
1) cu matrice de addiacenta
    Anxn - matrice patratica de ordin n
    A[i][j] = 1, daca ∃ (i, j) ∈ E
              0, in caz contrar
    Elementele de pe diagonala principala sunt 0.
    Matricea este simetrica fata de diagonala principala.
    d(x) = suma elementelor de pe linia/ coloana x
    Exista 2 * m valori egale cu 1 in matricea de adiacenta
    
    Implementare
    void read() {
      int A[NMAX][NMAX], n, m;
      cin >> n >> m;
      for (int i = 1; i <= m; ++ i) {
        int x, y;
        cin >> x >> y;
        A[x][y] = A[y][x] = 1;
      }
    }
    
2)cu liste de adiacenta (se memoreaza pentru fiecare nod nodurile cu care acesta este adiacent)

    struct edge {
      int info;
      node* next;
    }
    
    void add(node* &first, int val) {
      node* p = new node;
      p -> info = val;
      p -> next = first;
      first = p;
    }
    
    void read() {
      node* G[NMAX];
      int n, m;
      cin >> n >> m;
      for (int i = 1; i <= m; ++ i) {
        int x, y;
        cin >> x >> y;
        add(G[x], y);
        add(G[y], x);
      }
    }
    
3) cu vetor de muchii

    struct edge {
      int x, y;
    }
    
    void read() {
      edge vec[NMAX * (NMAX - 1) / 2];
      int n, m;
      cin >> n >> m;
      for (int i = 1; i <= m; ++ i)
        cin >> vec[i].x >> vec[i].y;
    }
